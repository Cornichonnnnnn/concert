#!/usr/bin/env python

import sys
import os
import argparse
import subprocess
import concert
import concert.session


def run_shell(m=None):
    try:
        from IPython import embed
        import quantities as q

        if m:
            print m.__doc__

        banner = "Welcome to Concert {0}".format(concert.__version__)
        embed(banner1=banner)
    except ImportError as e:
        print("You must install IPython to run the Concert shell: %s" % e)


def exit_if_not_exists(session):
    if not concert.session.exists(session):
        message = "Session `{0}' does not exist. Run `concert init {0}' first."
        print(message.format(session))
        sys.exit(1)


def init_session(args):
    if concert.session.exists(args.session) and not args.force:
        print("Session `%s' already exists" % args.session)
    else:
        concert.session.create(args.session)


def start_session(args):
    exit_if_not_exists(args.session)
    run_shell(concert.session.load(args.session))


def edit_session(args):
    exit_if_not_exists(args.session)
    subprocess.call([os.environ['EDITOR'],
                     concert.session.path(args.session)])


def show_sessions(args):
    sessions = concert.session.get_existing()
    print("Available sessions:")

    for session in sessions:
        print("  %s" % session)


if __name__ == '__main__':
    if len(sys.argv) == 1:
        run_shell()
        sys.exit(0)

    parser = argparse.ArgumentParser()

    parser.add_argument('--version',
                        action='version',
                        version="Concert v%s " % concert.__version__)

    subparsers = parser.add_subparsers(title="Concert commands",
                                       metavar="")

    init_parser = subparsers.add_parser('init', help='Create a new session')
    init_parser.add_argument('--force', action='store_true',
                             help="Overwrite existing sessions")
    init_parser.add_argument('session', type=str)
    init_parser.set_defaults(func=init_session)

    start_parser = subparsers.add_parser('start', help='Start a session')
    start_parser.add_argument('session', type=str)
    start_parser.set_defaults(func=start_session)

    edit_parser = subparsers.add_parser('edit', help='Edit session details')
    edit_parser.add_argument('session', type=str)
    edit_parser.set_defaults(func=edit_session)

    show_parser = subparsers.add_parser('show', help='Show existing sessions')
    show_parser.set_defaults(func=show_sessions)

    args = parser.parse_args()
    args.func(args)
